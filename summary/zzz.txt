arithmetic_13.cpp
/* reverse integer [2] : (0007) reverse integer (0009) palindrome number
 * add integers [3] : (0067) add binary (0066) Plus One (0371) add integers
 * divide integers [1] :  (0027) divide two integers
 * multiply strings [1] : (0043) multiply strings
 * power of double [1] : (0050) power of double float
 * roman [2] : (0012) integer to Roman (0013) Roman to Integer
 * single number [2] : (0136) single number (0137) single number ii
 * bezout's identity [1] : (0365) the water jug problem
 */
dp_matrix_7.cpp
/* matrix area [3] (0085*) rectangle area (0221) square area (0363*) sub matrix sum
 * matrix paths [4] unique paths (0062) unique paths with obstacles (0063) min path sum (0064)  dungeon game (0174) 
 */
dp_stock_rob_7.cpp 
/* stock[5]: (121) stock I (0122) stock II (0123) stock III (0188) stock IV (0309) stock V
 * rob[2]: (0198) max rob money (0213) max rob money 
 */
dp_2str_maxsub_7.cpp 
/* two strings[5]: (0010) regular express (0044) wildcard express (0072) min edit distance (0097) interleave strings (0115) max number of subsequence 
 * max sub array[2]: //(0053)max continuous subarray sum  (0152)max product of numbers from sub array 
 */
dp_misc_8.cpp 
/* O(1) depending[4]: (0139) word break time (0322) min number of coins combining to a mount of money (0070) climb stairs (0091) number of Docoding ways
 * O(n) depending[2]: (0343) max product from integer break  (0368) max (largest) divisible subset
 * O(nn) depending[2]: (0132) min cut to form palindrome substring (0312) max score by burst bulloons
 */
greey_7.cpp
/*Jump GameII(0045)
 *Jump Game  (0055) greedy choice, the position with current longest reach
 *Gas Station(0134) greedy choice, the position with current positive gas volume
 *Candy      (0135) greedy choice, 
 *Rm Dup Letters (0316) greedy choice, the position with current min value, which satisfy the length requirement
 *Create Max Num (0321) greedy choice, the position with current max digit, which satisfy the length requirement
 *Paching Array  (0330) gready choice, insert
 */
array_elements_9.cpp
/* remove elements[4]: 
 * (0026) remove duplicates (0080) remove duplicates II 
 * (0027) remove by value (0283) remove zeros 
 * find elements [5]:
 * missing positive (0041) first missing positive in a unsorted array (0268) the missing number from range [0,n] (0287) the duplicate number from range [1,n-1]
 * find majority (0169) majority element : more than 1/2 (0229) majority element : more than 1/3
 */
array_modify_11.cpp 
/* sort array [4] (0164) bucket sort (0215) quick sort (0324) wiggle sort II (0179) largest number string 
                  partition (*) 3-way partition (*)
 * reverse array[4] (0151) reverse words in sentence (0344) reverse string (0345) reverse vowels
 * retate array [1] (0189)
 * merge array [1] (0088)
 * shuffle array [1] (0384)
 */
search_binary_14.cpp
/*search rotated sorted array [4]: (0033) search rotated sorted array (0081) search with duplicates (0153) search min rotated sorted array (0154) search min with duplicates
 *search sorted array [3]: (0034) search range (0035) search inserted index (0074) search Matrix
 *square root [2]: (0069) find square root (0367) check if a valid perfect square
 *find peak [2]: (0162) find peak element (0852) find the peak index
 *find median [1]: (0004) find median of two sorted array
 *others [2]: (0275) find H Index II  (0278) find the first bad version
 */
search_linear_8.cpp
/*sum [4]: (0015) three sum (0016) three summ closet (0018) four sum  (0167) two sum II, for sorted array
 *water [2]:  (0011) container with most water (0042) trap rain water
 *[1]:(0209) shortest subarray with sum larger than a number 
 *[1]:(0240) search matrix II, each row sorted, and each collomn sorted
 */ 
tree_construct_7.cpp
 /*array to tree [5]: (0095) build all unique trees by n elements II (0096) build all unique trees by n elements I
                      (0105) build a tree by its pre-order and in-order traversal (0106) build a tree by its in-order and post-order traversal
                      (0108) build a balanced BST by a sorted array
  *list to tree  [1]: (0109) build a balanced BST by a sorted list
  *string to tree[1]: serialize and de-serialize binary tree by pre-order traversal (0297)
  */
tree_iterative_8.cpp
/* traversal[4]: (0094) (stack) inorder, (0103) (queue) level-order-zigzag, (0144) (stack) preorder, (0145) (stack) postorder
 * bst iterater[1]: (0173) (stack)
 * populate next right pointer[2]: (0116) complete (0117) non-complete 
 * valid serialization [1]: (0331) (stack->integer)
 */
tree_path_depth_8.cpp
/* path  [5]: (0112) find a root-to-leaf path that has a given node sum (0113) find all root-to-leaf path that has a given node sum 
 *            (0124) find a node-to-node path which has the largest sum
 *            (0129) calculate the sum of the root-to-leaf path numbers
 *            (0257) find all root-to-leaf path
 * depth [3]: post order: (0104) max depth (0110) balanced tree (0111) min depth
 */
tree_misc_14.cpp
/* level-order traversal [3] (0102) level-order (0107) level-order-bottom-up (0199) right side view
 * in-order traversal [3] (0098) valid BST (0099) swapped BST (0230) k-th node in BST
 * pre-order traversal: two trees [2] (0100) same tree (0101) symmetric tree
 *
 * pre-order, complete tree [1] (0222)
 * post-order, tree LAC [2] (0235) LCA of BST (0236) LCA of BT
 * post-order, rob III [1] (0337)
 * modify a tree [2] (0114) flatten tree (0226) invert tree
 */
segment_tree_1.cpp
/* (0307) range sum query
 */
trie_3.cpp
/*(0208) basic trie with addSTR and searchSTR
 *(0211) trie with RE search 
 *(0212) Matrix word search with Trie 
 */
hash_match_10.cpp 
/*distribution match [2] (0030) Substring with Concatenation of All Words (0076) minimum window in S which will contain all the characters in T
 *string match [2] (0049) Group Anagrams (0187) find all repeated DNA substring with 10 characters 
 *gradient match [1] (0149) max points on a line 
 *no match [5] (0242) is Anagram (0290) word pattern (0299) bulls and cows (0349) Intersection of Two Arrays (0350) Intersection of Two Arrays II
 */
hash_search_11.cpp
/* search duplicates char[6], hash table as position record [the value is show up position]
 * (0217)if contains duplicate (0219) contains nearby duplicate (0220) contains nearby almost duplicate 
 * (0003)Longest Substring Without Repeating Characters 
 * (0166)fraction to decimal 
 * (0387)First Unique Character  
 *
 * hash table for O(1) search  [5]
 * (0001)two sum  (0454)Four Sum II search four numbers sum to zero
 * (0128)search longest Consecutive Sequence (0274)search the H index (not calculate)
 * (0336)search all the Palindrome Pairs
 */
recurse_misc_3.cpp
/* (0037)sudoku solver 
 * (0087)check if string s is scramble string of string t 
 * (0395)find longest substring with at least K repeating characters 
 */
recurse_collect_17.cpp
/*find all possible solution:
    math[7]
    (0039)combination I (0040)combination II (0046)permutation I (0047)permutation II (0078)subset I  (0090)subset II
    (0077)find all comobinations of k elements out of a set of n elements
    queue[2]
    (0051)find the number of solutions for the N-Queen problem (0052)find all solutions for the N-Queen problem 
    expression[2]
    *^(0241)find all different ways to add parentheses in an expressiong with '*', '+', '-' and integers 
    *(0282)find all different ways to add '+', '-', '*' in a integer string, so the result expression calculates to be a target integer 
    parentheses[2]
    (0022)find all valid string with n pair of parentheses  O(2^N)
    *(0301)find all different ways to remove invalid parentheses 
    misc[4]
    (0017)find all possible words from a phone number, O(3^N), N is the digit counts of the phone number
    (0093)find all possible IP Address out of a string of digits 
    (0131)find all possible palindrome partions of a string
    *^(0140)find all string break ways, so that all words belongs to a provided word set
 */
ordered_set_map_5.cpp
/* lower bound [4] : (0300) LIS; (0354) LIS: russian doll envelopes 
 *                   (0352) data stream to disjoint intervals VS (0128) LCS; (0327) count the ranges, whose element sum is within [lb, ub]
 * application to use the top elements (rbegin()) [1] : (0218) skyline problem 
 */
heap_3.cpp
/* (0378) find kth smallest in sorted matrix
 * (0347) find top k frequent element
 * (0295) find the median of data stream
 */
graph_11.cpp
/*DFS
 *(0133) clone graph (0138) copy random list (0332) reconstruct itinerary
 *DFS in matrix 
 *(0079)word search in matrix
 *(0130)surrounded regions in matrix 
 *(0200)number of isolated islands in matrix 
 *(0329)longest increasing integer path in matrix
 *BFS
 *(0126)word ladder II (0127)word ladder length
 *(0207) course schedule (0210)course schedule II 
 */
stack_10.cpp
/* increasing/decreasing stack [3] : (0239) sliding window maximum (0155) min stack (0084) largest rectangle histogram
 * modeled as a stack [5] : (0071) simplify directery path 
 *                          (0032) longest valid parentheses (0020) is valid parentheses 
 *                          (0224) calculator with "numbers, '+', '-', '(', ')'" (0227) calculator II with "numbers, '+', "-', '*', '/'" 
 * stack and queue [2] : (0225) implement a stack by queues (0232) implement a queue by stacks 
 */
list_rev_merge_part_sort_rot_swap_12.cpp 
// reverse : (0025) reverse K group (0092) reverse list between (0206) reverse List
// merge : (0021) merge 2 lists (0023) merge K lists
// partition : (0328) Odd Even List (0086) partition List
//             (0143) reorder List : partition + reverse + merge
// sort : (0147) insertion sort (0148) merge sort
// (0061) rotate right
// (0024) swap pairs
list_rm_loop_ints_palin_9.cpp
// remove : (0019) remove n-th node from End (0203) remove nodes by value (0237) delete node by pointer
//          (0082) delete duplicate II (0083) delete duplicate
// loop : (0141) cycle test (0142) find cycle entry node
// (0160) intersection of two lists
// (0234) is Palindrome List
concurrency_5.cpp
/* print in order [4] : (1114) print in order (1115) print alternatively (1116) print zero even odd (1195) print fizz buzz
 * group action [1] : (1117) build H2O
 */
system_design_5.cpp
/* cache [2] : (0146) LRU cache (0460) LFU cache
 * radomized set [2] : (0380) randomized set (0381) randomized collection
 * tweeter [1] : (0355) tweeter
 */
