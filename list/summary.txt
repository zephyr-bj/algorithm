remove element from list [5]
  // any possible to delete the head, use a dummy head in front
  by position (0019)
  * delete duplicates (all of them) (0082)
  delete duplicates (except the first one) (0083)
  remove elements by val (0203)
  delete element by pointer only (0237)
  
insert element to list [2]
  insert sort (0147)
  partition list (0086)
  
merge lists [2]
  // need a dummy head as well
  merge two lists (0021)
  * merge K lists (0023)
  * merge sort (0148)
  odd even list (0328) 
  
reserver lists [4]
  swap node pairs (0024)
  reverse K-length groups (0025)
  reverse between two nodes (0092)
  reverse List (0206)
  
rotate lists [1]
  rotate right (0061)
  
partition list [4] 
  reorder list (0143) partition+reverse+merge
  is palindrome (0234) partition+reverse+cmp, and there is a recursive method
  
detect cycle [2]
  has cycle ? (0141)
  where is the cycle (0142), the very simple equation leads to the solution
  
detect intersection [1]
  get intersection (0160)
  
  
// dummy fake head for all starting status
/*
        ListNode dummy(0);
        dummy.next = head;
*/
//partition list into half half
//even number of elements: slow stops at N/2 (the last of the first half), fast stops at N-1 (the second last of second half)
//odd number of elements: slow stops at N/2+1 (the element in the center), fast stops at N (the last of second half)
/*
        if(head==NULL||head->next==NULL)return;
        ListNode * p = head;
        ListNode * q = head;
        while(p!=NULL&&p->next!=NULL&&p->next->next!=NULL){
            p=p->next->next;
            q=q->next;
        }
*/
//reverse list
/*
        ListNode dummy(0);
        dummy.next=head;
        ListNode * p = &dummy;
        ListNode * cur=head, *nex = cur==NULL?NULL:cur->next;
        while(cur!=NULL&&nex!=NULL){
            cur->next = nex->next;
            nex->next = p->next;
            p->next=nex;
            nex=cur->next;
        }
        return dummy.next;
*/
/*
        ListNode * newHead=head;
        ListNode * p = head==NULL?NULL:cur->next;
        newHead->next=NULL;
        while(p!=NULL){
            ListNode * tmpNewHead = newHead;
            newHead=p;
            p=p->next;
            newHead->next = tmpNewHead;
        }
        return newHead;
 */
// merge List
ListNode * mergeList (ListNode * p, ListNode * q){
    ListNode dummy(0);
    ListNode * t = &dummy;
    while(q!=NULL&&p!=NULL){
        if(q->val<p->val){
            t->next=q;
            q=q->next;
        }else{
            t->next=p;
            p=p->next;
        }
        t=t->next;
        t->next=NULL;
    }
    if(p!=NULL)t->next=p;
    else t->next=q;
    return dummy.next;
}
