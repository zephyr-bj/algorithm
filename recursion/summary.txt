// [1]candidate string, [2]collection bin, [3]conditions to complete, [4]conditions to enter recursive call
find all possible solution:
    find all possible words from a phone number (0017) O(3^N), N is the digit counts of the phone number
    find all valid string with n pair of parentheses (0022) O(2^N)
    find all combinations based on a set of number for a target sum value (0039), you can use each elements unlimited number of time
    find all combinations based on a set of number for a target sum value (0040), duplicate elements in set, use each once
    find all permutations of a set of number (0046)
    * find all permutations of a set of number (0047), duplicate elements in set
    find the number of solutions for the N-Queen problem (0051)
    find all solutions for the N-Queen problem (0052)
    find all comobinations of k elements out of a set of n elements (0077)
    find all sebsets of a set of n distinct integers (0078)
    find all subsets of a set of n integers (0090) may contains duplicate integers
    find all possible IP Address out of a string of digits (0093)
    find all possible partions of a string, in which each parts is a parlindrome string (0131)
    * find all different ways to add parentheses in an expressiong with '*', '+', '-' and integers (0241)
    * find all different ways to add '+', '-', '*' in a integer string, so the result expression calculates to be a target integer (0282)
    * find all different ways to remove invalid parentheses (0301)
others:
    sudoku solver (0037)
    check if string s is scramble string of string t (0087)
    find all string break ways, so that all words belongs to a provided word set (0140)
    find longest substring with at least K repeating characters (0395)
    
Master theorem:

T(n)=aT(n/b)+f(n)
c_{crit}=log_{b}^{a}=cc
(1)Work to split/recombine a problem is dwarfed by subproblems (f(n)=O(n^c),where c<cc) ==> T(n)=O(n^{cc})
(2)Work to split/recombine a problem is comparable to subproblems (f(n)=O(n^{cc}log^{k}n), where k>0) ==> T(n)=O(n^{cc}log^{k+1}n)
(3)Work to split/recombine a problem dominates subproblems (f(n)=Omega(n^c),where c>cc, and a(f(n/b))<kf(n), where k<1) ==> T(n)=O(f(n))
extension to (2) when f(n)=O(n^{cc}log^{k}n)
(21)k>-1, T(n)=O(n^{cc}log^{k+1}n)
(22)k==-1, T(n)=O(n^{cc}loglogn)
(23)k<-1, T(n)=O(n^{cc})

in total: 20

combination: 
    combinationI(0039)+combinationII(0040)+Cnk(0077)+subset(0078)+subsetII(0090)
Permutation:
    permutation(0046)+permutationII(0047)
Insert operators "+""-""*" in string:
    (0282)
Remove invalid parentheses:
    (0301)
Longest substring with at least K repeating characters
    (0395)
