remove elements
  remove duplicate in sorted arrary (0026)
  remove by value in unsorted array (0027)
  remove duplicate in sorted array, duplicates limit is 2 (0080)
  remove zeros from unsorted array and append them to the end (0283)

find elements
  find first missing positive in a unsorted array (0041)
  find majority element : more than 1/2 (0169)
  find majority elements : more than 1/3 (0229)
  find the missing number from range [0,n] (0268)
  find the duplicate number from range [1,n] (0287) 
  
sort array
  maximum gap (0164)
  largest number string by non negative integers (0179) trick for compare rule
  Kth largest element (0215)
  wiggle sort II (0324)
  
reverse array
  reverse every word in a string (0151)
  reverse string (0344)
  reverse vowels (0345)
  retate array by k (0189), consider the case in which n%k==0
  
merge array
  merge two arrays (0088)
  
shuffle array
  shuffle array (0384)
  
  
// remove methods: 
// put the replacement in the end, and j=1;
int removeDuplicates(vector<int>& nums) {
    int n = nums.size();
    if(n<2)return n;
    int i=0; 
    int l=n;
    for(int j=1; j<n; j++){
        if(nums[i]!=nums[j])i++;
        else l--;
        nums[i]=nums[j];
    }
    return l;
}
// put the replacement in front, and j=0; 
int removeElement(vector<int>& nums, int val) {
    int n = nums.size();
    if(n<1)return n;
    int i=0; 
    int l=n;
    for(int j=0; j<n; j++){
        nums[i]=nums[j];
        if(nums[j]!=val)i++;
        else l--;
    }
    return l;
}
// partition array + kthSmallest
int partition(vector<int>&arr, int l, int r) { 
    int x = arr[r], i = l; 
    for (int j = l; j <= r - 1; j++) { 
        if (arr[j] <= x) { 
            swap(arr[i], arr[j]); 
            i++; 
        } 
    } 
    swap(arr[i], arr[r]); 
    return i; 
} 
int kthSmallest(vector<int>&arr, int l, int r, int k){ 
    if (k > 0 && k <= r - l + 1) { 
        int pos = partition(arr, l, r); 
        
        if (pos-l+1 == k) 
            return arr[pos]; 
        if (pos-l+! > k)  
            return kthSmallest(arr, l, pos-1, k); 
        else
            return kthSmallest(arr, pos+1, r, k-pos+l-1); 
    } 
    return INT_MAX; 
} 
void partition3Way(vector<int>&arr, int l, int r, int& x, int&y) { 
    int pivot = arr[r];
    int i = l; int j=l; int k=r-1;
    while(j<=k){
        if(arr[j]<pivot){
            swap(arr[i],arr[j]);
            i++; j++;
        }else if(arr[j]>pivot){
            swap(arr[j],arr[k]);
            k--;
        }else{
            j++; 
        } 
    } 
    swap(arr[j],arr[r]);
    x=i;y=j;
}
int kthSmallest3Way(vector<int>&arr, int l, int r, int k){ 
    if (k > 0 && k <= r - l + 1) { 
        int x; int y;
        partition3Way(arr, l, r, x, y);
        if (k>=x-l+1&&k<=y-l+1) 
            return arr[y]; 
        else if (k > y-l+1)  
            return kthSmallest3Way(arr, y+1, r, k-(y-l+1)); 
        else
            return kthSmallest3Way(arr, l, x-1, k); 
    } 
    return INT_MAX; 
} 
// find elements in range [1,n]
int findDuplicate(vector<int>& nums) {
    int n=nums.size();
    for(int i=0; i<n; i++){
        if(nums[abs(nums[i])-1]>0)
            nums[abs(nums[i])-1]=-nums[abs(nums[i])-1];
        else
            return abs(nums[i]);
    }
    return 0;
}
int firstMissingPositive(vector<int>& nums) {
    int n = nums.size();
    if(n<1)return 1;
    for(int i=0; i<n; i++){
        int k = nums[i]; // the next positive to check
        while(k>0&&k<=n&&nums[k-1]!=k){
            int t = nums[k-1];
            nums[k-1]=k;
            k=t;
        }
    }
    for(int i=0; i<n; i++){
        if(nums[i]!=i+1)return i+1;
    }
    return n+1;
}
// reverse vowels
bool isVowel(char x) {
    return (x=='a'||x=='e'||x=='i'||x=='o'||x=='u'||x=='A'||x=='E'||x=='I'||x=='O'||x=='U');
}
string reverseVowels(string s) {
    int L=s.size();
    int i=0; int j=L-1;
    while(i<j){
        while((!isVowel(s[i]))&&i<j)i++;
        while((!isVowel(s[j]))&&j>i)j--;
        swap(s[i],s[j]);
        i++;j--;
    }
    return s;
}
