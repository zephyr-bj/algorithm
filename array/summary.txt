remove elements
  remove duplicate in sorted arrary (0026)
  remove by value in unsorted array (0027)
  remove duplicate in sorted array, duplicates limit is 2 (0080)
  remove zeros from unsorted array and append them to the end (0283)

find elements
  find first missing positive in a unsorted array (0041)
  find the missing number from range [0,n] (0268)
  find the duplicate number from range [1,n] (0287) 
  
reverse array
  reverse every word in a string (0151)
  reverse string (0344)
  reverse vowels (0345)
  
merge array
  merge two arrays (0088)
    
rotate array
  retate array by k (0189), consider the case in which n%k==0
  
  
// remove methods: 
int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        if(n<2)return n;
        int i=0; 
        int l=n;
        for(int j=1; j<n; j++){
            if(nums[i]!=nums[j])i++;
            else l--;
            nums[i]=nums[j];
        }
        return l;
}
int removeElement(vector<int>& nums, int val) {
        int n = nums.size();
        if(n<1)return n;
        int i=0; 
        int l=n;
        for(int j=0; j<n; j++){
            nums[i]=nums[j];
            if(nums[j]!=val)i++;
            else l--;
        }
        return l;
}
// find elements in range [1,n]
  int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        for(int i=0; i<n; i++){
            if(nums[abs(nums[i])-1]>0)
                nums[abs(nums[i])-1]=-nums[abs(nums[i])-1];
            else
                return abs(nums[i]);
        }
        return 0;
}
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        if(n<1)return 1;
        for(int i=0; i<n; i++){
            int k = nums[i]; // the next positive to check
            while(k>0&&k<=n&&nums[k-1]!=k){
                int t = nums[k-1];
                nums[k-1]=k;
                k=t;
            }
        }
        for(int i=0; i<n; i++){
            if(nums[i]!=i+1)return i+1;
        }
        return n+1;
}
// reverse vowels
    string reverseVowels(string s) {
        int L=s.size();
        int i=0; int j=L-1;
        while((!isVowel(s[i]))&&i<L)i++;
        while((!isVowel(s[j]))&&j>i)j--;
        while(i<j){
            swap(s[i],s[j]);
            i++;j--;
            while((!isVowel(s[i]))&&i<j)i++;
            while((!isVowel(s[j]))&&j>i)j--;
        }
        return s;
}
