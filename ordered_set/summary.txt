application of lower/upper bound
  [1]LIS: find the longest Increasing sequence (0300), O(Nlog(N)) for the length, O(N^2) for the sequence by dp
  [1]LIS: russian doll envelopes (354)
  [2]data stream as disjoint intervals (352), process data one by one, different from (0128) LCS
  [2]count the ranges, whose element sum is within [lb, ub] (327)
application to use the top elements (rbegin())
  [1]skyline problem (218)


1. lower_bound: the found iterator has the key equal or larger than the target key, the previous iterator has smaller key
   upper_bound: the found iterator has larger key than the target key, the previous iterator has equal or smaller key
2. int, string and pair can be a key; vector cannot be used as a key
    multiset<pair<int,int>>: both integers are considered for ordering
    multimap<int,int>: only the first integer is considered for ordering
3. define a set with customized compare, say a stuct my_cmp, it should define a "operator ()"
    set<T,my_cmp>bin;
    set<int, greator<int>>bin;
    a sample comparison object: always use key and return as const
    struct my_cmp {
        bool operator () (const pair<int,int>&a, const pair<int,int>&b) const {
            if(a.first==b.first)return a.second < b.second;
            return a.first < b.first;
        }
    };
    by default, the set use less<T>, which returns the same as applying the less-than operator (a<b).
    in STD, there are also less_equal<T>, greater_equal<T>
4. difference between   bin.erease(x);
                        bin.erease(bin.find(x));   for multiset

    
ordered_set or ordered_map are implemented by a self-balancing BST, or AVL tree (named after inventors Adelson-Velsky and Landis)
1. the heights of the two child subtrees of any node differ by at most one; therefore, it is also said to be height-balanced.
2. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree.
3. Insertions and deletions may require the tree to be rebalanced by one or more tree rotations.
Insertion:
    1) After inserting a node, it is necessary to check each of the node's ancestors for consistency with the AVL rules.
    2) For each node checked, if the balance factor remains 1, 0, or -1 then no rotations are necessary. Otherwise, it's unbalanced.
    3) After each insertion, at most two tree rotations are needed to restore the entire tree.
Deletion:
    1) If a node is a leaf, remove it.
    2) If the node is not a leaf, replace it with either the largest in its left subtree (rightmost) or the smallest in its right subtree (leftmost), and remove that node. The node that was found as replacement has at most one subtree.
    3) After deletion, retrace the path from parent of the replacement to the root, adjusting the balance factors as needed.
